{"version":3,"sources":["DetailsForm.js","App.js","serviceWorker.js","index.js"],"names":["DetailsForm","onSubmit","this","props","submitHandler","label","labelFor","labelInfo","name","id","defaultValue","clientId","placeholder","onChange","changeHandler","clientSecret","helperText","authEndpoint","tokenEndpoint","type","rightIcon","intent","text","React","Component","App","params","URLSearchParams","window","location","search","state","darkMode","JSON","parse","localStorage","getItem","authCode","get","homeUrl","tokenResponse","tokenError","updateState","bind","redirect","getToken","toggleDarkMode","main","tokenBlock","disabled","onClick","interactive","elevation","Elevation","TWO","appClass","className","checked","event","target","value","setState","setItem","preventDefault","url","options","uri","encodeURI","method","body","code","client_id","client_secret","grant_type","json","that","rp","post","then","res","stringify","catch","err","error","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9ac035c6.chunk.js","sourcesContent":["import React from 'react';\nimport { FormGroup, InputGroup, Button } from '@blueprintjs/core';\n\nclass DetailsForm extends React.Component {\n  render() {\n    return (\n      <form onSubmit={this.props.submitHandler}>\n        <FormGroup\n            label='Client ID'\n            labelFor='text-input'\n            labelInfo='(required)'>\n          <InputGroup name=\"clientId\" id='text-input' defaultValue={this.props.clientId} placeholder='1x46iftmdzqtt' onChange={this.props.changeHandler}></InputGroup>\n        </FormGroup>\n\n        <FormGroup\n            label='Client Secret'\n            labelFor='text-input'\n            labelInfo='(required)'>\n          <InputGroup name=\"clientSecret\" id='text-input' defaultValue={this.props.clientSecret} placeholder='4ctdx7k5du36r5q1qfkarhw2ts5tbbhyv13c8yar0es6k40cwg'onChange={this.props.changeHandler}></InputGroup>\n        </FormGroup>\n\n        <FormGroup\n            helperText='The endpoint used by the client to obtain an authorisation code.'\n            label='Auth Endpoint'\n            labelFor='text-input'\n            labelInfo='(required)'>\n          <InputGroup name=\"authEndpoint\" id='text-input' defaultValue={this.props.authEndpoint} placeholder='https://my.domain/oauth/authorise' onChange={this.props.changeHandler}></InputGroup>\n        </FormGroup>\n\n        <FormGroup\n            helperText='The endpoint used by the application to trade an auth code for an access token.'\n            label='Token Endpoint'\n            labelFor='text-input'\n            labelInfo='(required)'>\n          <InputGroup name=\"tokenEndpoint\" id='text-input' defaultValue={this.props.tokenEndpoint} placeholder='https://my.domain/oauth/token' onChange={this.props.changeHandler}></InputGroup>\n        </FormGroup>\n\n        <Button type=\"submit\" rightIcon=\"arrow-right\" intent=\"success\" text=\"Next step\" />\n      </form>\n    );\n  }\n}\n\nexport default DetailsForm;","import React from 'react';\nimport './App.css';\nimport rp from 'request-promise';\nimport DetailsForm from './DetailsForm';\n\nimport { Card, Elevation, Button, Code, Switch, Pre } from '@blueprintjs/core';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const params = new URLSearchParams(window.location.search);\n\n    this.state = {\n      darkMode: JSON.parse(localStorage.getItem('darkMode')),\n      clientId: localStorage.getItem('clientId') || '',\n      clientSecret: localStorage.getItem('clientSecret') || '',\n      authEndpoint: localStorage.getItem('authEndpoint') || '',\n      tokenEndpoint: localStorage.getItem('tokenEndpoint') || '',\n      authCode: params.get('code'),\n      homeUrl: 'https://cinnes.github.io/oauth2-helper/',\n      tokenResponse: '',\n      tokenError: ''\n    };\n\n    this.updateState = this.updateState.bind(this);\n    this.redirect = this.redirect.bind(this);\n    this.getToken = this.getToken.bind(this);\n    this.toggleDarkMode = this.toggleDarkMode.bind(this);\n  }\n\n  render() {\n    var main;\n\n    var tokenBlock;\n\n    if (this.state.tokenResponse) {\n      tokenBlock = \n        <div>\n          <h4>Token Response</h4>\n          <Pre><Code>{this.state.tokenResponse}</Code></Pre>\n        </div>\n    } else if (this.state.tokenError) {\n      tokenBlock = \n        <div>\n          <h4>Error</h4>\n          <Pre><Code>{this.state.tokenError}</Code></Pre>\n        </div>\n    } else {\n      tokenBlock = <Button disabled={this.state.tokenResponse} onClick={this.getToken}>Fetch Token</Button>\n    }\n\n    if (this.state.authCode) {\n      main = \n        <Card interactive={false} elevation={Elevation.TWO}>\n          <h4>Authorisation Code: </h4>\n          <Pre><Code>{this.state.authCode}</Code></Pre>\n          {tokenBlock}\n        </Card>\n    } else {\n      main =\n        <Card interactive={false} elevation={Elevation.TWO}>\n          <DetailsForm \n            changeHandler={this.updateState} \n            submitHandler={this.redirect}\n            clientId={this.state.clientId}\n            clientSecret={this.state.clientSecret}\n            authEndpoint={this.state.authEndpoint}\n            tokenEndpoint={this.state.tokenEndpoint}/>\n        </Card>\n    }\n\n    const appClass = this.state.darkMode ? \"App bp3-dark\" : \"App\";\n\n    return (\n      <div className={appClass}>\n        <div className=\"container center\">\n          <Switch checked={this.state.darkMode} label=\"Dark Mode\" onChange={this.toggleDarkMode} />\n          {main}\n        </div>\n      </div>\n    );\n  }\n  \n  updateState(event) {\n    const name = event.target.name;\n    const value = event.target.value;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n  \n  redirect(event) {\n    localStorage.setItem('clientId', this.state.clientId);\n    localStorage.setItem('clientSecret', this.state.clientSecret);\n    localStorage.setItem('authEndpoint', this.state.authEndpoint);\n    localStorage.setItem('tokenEndpoint', this.state.tokenEndpoint);\n\n    event.preventDefault();\n    const url = `${this.state.authEndpoint}?response_type=code&client_id=${this.state.clientId}&redirect_uri=${this.state.homeUrl}&scope=read write`\n    window.location = url;\n  }\n\n  getToken() {\n    const authCode = this.state.authCode;\n\n    const options = {\n      uri: encodeURI(this.state.tokenEndpoint),\n      method: 'POST',\n      body: {\n        code: authCode,\n        client_id: this.state.clientId,\n        client_secret: this.state.clientSecret,\n        grant_type: \"authorization_code\"\n      },\n      json: true\n    };\n\n    const that = this;\n    rp.post(options)\n      .then(function(res) {\n        that.setState({\n          tokenResponse: JSON.stringify(res, null, 1),\n        });\n      })\n      .catch(function(err) {\n        that.setState({\n          tokenError: JSON.stringify(err.error, null, 1),\n        });\n      });\n  }\n\n  toggleDarkMode() {\n    localStorage.setItem('darkMode', !this.state.darkMode);\n    this.setState({\n      darkMode: !this.state.darkMode,\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}